package aspect;

import java.lang.reflect.Method;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import anno.Tran;

import tran.TranManager;


@Component //为其创建对象
@Aspect		//标识该对象为切面
public class TxAspect {
	
	@Autowired
	private TranManager tx;
	
	
	@Before(value="execution(* service..*.*(..))")
	public void before(JoinPoint joinPoint) throws NoSuchMethodException, SecurityException{
		
		String name = joinPoint.getSignature().getName();
		Method method = joinPoint.getTarget().getClass().getMethod(name);
		System.out.println(joinPoint.getTarget().getClass());
		System.out.println(joinPoint.getSignature().getName());
	}
	
	
	private long time;
	@Around(value="execution(* service..*.*(..) && @annotation(Tran)")
	public Object around(ProceedingJoinPoint joinPoint) throws Throwable{
		
		tx.begin();
		time=System.currentTimeMillis();
		Class targetClass = joinPoint.getTarget().getClass();
		String methodName = joinPoint.getSignature().getName();
		Object result =joinPoint.proceed();
		time = System.currentTimeMillis()-time;
		System.out.println(targetClass+"的"+methodName+"方法调用的时间为:"+time+"ms");
		tx.commit();
		return result;
	}
	
	
	public Object around1(ProceedingJoinPoint joinPoint) throws Throwable{
		
		Object result =null;
		
		Class targetClass = joinPoint.getTarget().getClass();
		String methodName = joinPoint.getSignature().getName();
		
//		Method method = targetClass.getMethod(methodName);
//		System.out.println(method.isAnnotationPresent(Tran.class));
		Method method=joinPoint.getTarget().getClass().getMethod(joinPoint.getSignature().getName());
		System.out.println(method.isAnnotationPresent(Tran.class));
		if(method.isAnnotationPresent(Tran.class)){
			tx.begin();
			time=System.currentTimeMillis();	
			result = joinPoint.proceed();
			time = System.currentTimeMillis()-time;
			System.out.println(targetClass+"的"+methodName+"方法调用的时间为:"+time+"ms");
			tx.commit();
		}else{
			result = joinPoint.proceed();
		}
		return result;
	}
	
	@AfterThrowing(value="execution(* service..*.*(..))",throwing="throwable")
	public void afterThrow(JoinPoint joinPoint,Throwable throwable){
		Class targetClass = joinPoint.getTarget().getClass();
		String methodName = joinPoint.getSignature().getName();
		System.out.println(targetClass+"的"+methodName+"方法");
		System.out.println(throwable.getClass());
		System.out.println("逗比才会出这种异常"+throwable.getMessage());
	}
	
}
